# R√®gles DemoForge - Outil d√©mo multi-boutiques avec backoffice admin prioritaire

## üìö Documentation de r√©f√©rence

- **OBLIGATOIRE** : Lire docs/README.md pour vue d'ensemble
- **CRITIQUE** : Consulter docs/01-vision-strategique.md pour objectifs
- **ESSENTIEL** : Respecter docs/02-nomenclature-technique.md pour conventions
- **PRATIQUE** : Suivre docs/99-guide-initialisation.md pour setup
- **DESIGN** : Consulter docs/03-charte-design.md pour Chakra UI
- **COMMERCIAL** : R√©f√©rencer docs/04-scenarios-demo.md pour contexte

## Architecture

- Projet divis√© en /backend et /frontend avec architecture multi-boutique unifi√©e
- Stack: React + Vite + TypeScript (frontend), Node.js + Express + Prisma + SQLite (backend)
- UI: Chakra UI exclusivement pour vitrine ET backoffice

## Priorit√©s

- **PRIORIT√â ABSOLUE**: Interface admin (backoffice) avant vitrine
- Focus t√¢che en cours, √©viter modifications non prioritaires

## Structure m√©tier

- Nomenclature: Commer√ßant > Boutiques > Cat√©gories > Produits
- 4 univers: brewery, tea-shop, beauty-shop, herb-shop
- Composants: Store* (vitrine), Admin* (backoffice), Shared\* (communs)

## Standards de code

- TypeScript strict, pas de any, props explicitement typ√©es
- Tests Jest obligatoires (couverture >80%), dossier **tests**
- Fichiers max 300 lignes, refactoriser si n√©cessaire
- Yarn classique exclusivement, pas de m√©lange npm/pnpm, pas de PnP

## Conventions

- Commentaires et commits en fran√ßais
- Format commits: type(scope): description
- Jamais de donn√©es mock en dev/prod, uniquement en tests

## Instructions pour l'IA

- Toujours respecter ces r√®gles dans les suggestions de code
- Prioriser l'interface admin dans tous les d√©veloppements
- Utiliser exclusivement Chakra UI pour les composants
- Maintenir la structure TypeScript stricte
- Proposer des tests Jest pour chaque fonctionnalit√©
- Consulter la documentation dans docs/ avant toute suggestion
