import { ChakraProvider } from "@chakra-ui/react";
import { fireEvent, render, screen } from "@testing-library/react";
import { UniverseProvider } from "../../../contexts/UniverseContext";
import { SharedProductCard } from "../../shared/SharedProductCard";

const TestWrapper = ({ children }: { children: React.ReactNode }) => (
  <ChakraProvider>
    <UniverseProvider defaultUniverse="brewery">{children}</UniverseProvider>
  </ChakraProvider>
);

const mockProduct = {
  id: "product-1",
  name: "Blonde de Garde",
  description:
    "Bi√®re blonde traditionnelle brass√©e selon les m√©thodes ancestrales",
  price: 4.5,
  category: "Blondes",
};

describe("StoreProductCard", () => {
  const mockOnAddToCart = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  test("affiche correctement toutes les donn√©es du produit", () => {
    render(
      <SharedProductCard
        id={mockProduct.id}
        name={mockProduct.name}
        description={mockProduct.description}
        price={mockProduct.price}
        category={mockProduct.category}
        onAddToCart={mockOnAddToCart}
        isAdminMode={false}
      />,
      { wrapper: TestWrapper }
    );

    // V√©rifier l'affichage du nom
    expect(screen.getByText("Blonde de Garde")).toBeInTheDocument();

    // V√©rifier l'affichage de la description
    expect(screen.getByText(/Bi√®re blonde traditionnelle/)).toBeInTheDocument();

    // V√©rifier l'affichage du prix format√©
    expect(screen.getByText("4.50‚Ç¨")).toBeInTheDocument();

    // V√©rifier l'affichage de la cat√©gorie
    expect(screen.getByText("Blondes")).toBeInTheDocument();
  });

  test("affiche le bouton ajouter au panier en mode vitrine", () => {
    render(
      <SharedProductCard
        id={mockProduct.id}
        name={mockProduct.name}
        description={mockProduct.description}
        price={mockProduct.price}
        onAddToCart={mockOnAddToCart}
        isAdminMode={false}
      />,
      { wrapper: TestWrapper }
    );

    const addToCartButton = screen.getByText("üõí Ajouter au panier");
    expect(addToCartButton).toBeInTheDocument();
  });

  test("appelle onAddToCart avec le bon ID", () => {
    render(
      <SharedProductCard
        id={mockProduct.id}
        name={mockProduct.name}
        description={mockProduct.description}
        price={mockProduct.price}
        onAddToCart={mockOnAddToCart}
        isAdminMode={false}
      />,
      { wrapper: TestWrapper }
    );

    const addToCartButton = screen.getByText("üõí Ajouter au panier");
    fireEvent.click(addToCartButton);

    expect(mockOnAddToCart).toHaveBeenCalledWith("product-1");
    expect(mockOnAddToCart).toHaveBeenCalledTimes(1);
  });

  test("g√®re les prix avec d√©cimales", () => {
    render(
      <SharedProductCard
        id="product-2"
        name="IPA Premium"
        description="IPA houblonn√©e"
        price={5.75}
        onAddToCart={mockOnAddToCart}
        isAdminMode={false}
      />,
      { wrapper: TestWrapper }
    );

    expect(screen.getByText("5.75‚Ç¨")).toBeInTheDocument();
  });

  test("g√®re les descriptions longues avec troncature", () => {
    const longDescription =
      "Cette bi√®re blonde exceptionnelle est brass√©e selon des m√©thodes traditionnelles transmises de g√©n√©ration en g√©n√©ration dans notre brasserie familiale situ√©e au c≈ìur de la r√©gion.";

    render(
      <SharedProductCard
        id="product-3"
        name="Blonde Tradition"
        description={longDescription}
        price={4.2}
        onAddToCart={mockOnAddToCart}
        isAdminMode={false}
      />,
      { wrapper: TestWrapper }
    );

    // La description doit √™tre pr√©sente (m√™me si tronqu√©e visuellement)
    expect(screen.getByText(longDescription)).toBeInTheDocument();
  });

  test("fonctionne sans cat√©gorie", () => {
    render(
      <SharedProductCard
        id="product-4"
        name="Produit sans cat√©gorie"
        description="Description simple"
        price={3.0}
        onAddToCart={mockOnAddToCart}
        isAdminMode={false}
      />,
      { wrapper: TestWrapper }
    );

    expect(screen.getByText("Produit sans cat√©gorie")).toBeInTheDocument();
    expect(screen.getByText("3.00‚Ç¨")).toBeInTheDocument();
  });

  test("applique le th√®me brewery correctement", () => {
    const { container } = render(
      <SharedProductCard
        id={mockProduct.id}
        name={mockProduct.name}
        description={mockProduct.description}
        price={mockProduct.price}
        category={mockProduct.category}
        onAddToCart={mockOnAddToCart}
        isAdminMode={false}
      />,
      { wrapper: TestWrapper }
    );

    // V√©rifier que le composant est rendu avec les styles Chakra
    const productCard = container.querySelector(".chakra-box");
    expect(productCard).toBeInTheDocument();
  });

  test("g√®re les interactions hover", () => {
    const { container } = render(
      <SharedProductCard
        id={mockProduct.id}
        name={mockProduct.name}
        description={mockProduct.description}
        price={mockProduct.price}
        onAddToCart={mockOnAddToCart}
        isAdminMode={false}
      />,
      { wrapper: TestWrapper }
    );

    const productCard = container.querySelector(".chakra-box");
    expect(productCard).toHaveClass("chakra-box");
  });

  test("ne affiche pas le bouton admin en mode vitrine", () => {
    render(
      <SharedProductCard
        id={mockProduct.id}
        name={mockProduct.name}
        description={mockProduct.description}
        price={mockProduct.price}
        onAddToCart={mockOnAddToCart}
        isAdminMode={false}
      />,
      { wrapper: TestWrapper }
    );

    expect(screen.queryByText("‚úèÔ∏è Modifier")).not.toBeInTheDocument();
  });
});
